
struct PointLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
	float linear;
	float quadratic;
};
struct DirLight {
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform PointLight pointLight[NUM_POINT_LIGHTS]; 
uniform DirLight dirLight; 



vec3 CalcDirLight(DirLight light, vec3 norm, vec3 pos, mat4 view, Material mat) {
	vec3 ambientC = mat.ambient;
	vec3 diffuseC = mat.diffuse;
	vec3 specularC = mat.specular;
	float shininess = textureMaterial.shininess;

	vec3 lightDir = normalize( (mat3(view) * -light.direction) ); 

	vec3 ambient = ambientC * light.ambient;
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = (diffuseC * diff) * light.diffuse;

	vec3 viewDir = normalize(vec3(0.0) - pos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess * 128.0);
	vec3 specular = specularC * spec * light.specular;

	vec3 result = ambient + diffuse + specular;
	return result;
}

vec3 CalcPointLight(PointLight light, vec3 norm, vec3 pos, mat4 view, Material mat) {
	vec3 ambientC = mat.ambient;
	vec3 diffuseC = mat.diffuse;
	vec3 specularC = mat.specular;
	float shininess = textureMaterial.shininess;

	vec3 lPos = (view * vec4(light.position, 1.0)).xyz;
	float distance = length(lPos - pos);
	vec3 lightDir = normalize(lPos - pos);



	float attenuation = 1.0 / (light.constant + light.linear * distance +
						light.quadratic * (distance * distance));
	ambientC *= attenuation;
	diffuseC *= attenuation;
	specularC *= attenuation;

	vec3 ambient = ambientC * light.ambient;
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = (diffuseC * diff) * light.diffuse;

	vec3 viewDir = normalize(vec3(0.0) - pos);
	vec3 reflectDir = reflect(-lightDir, norm);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	
	float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess * 128.0);
	vec3 specular = specularC * spec * light.specular;

	vec3 result = ambient + diffuse + specular;
	return result;
}
