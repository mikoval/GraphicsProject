
struct PointLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
	float linear;
	float quadratic;
};
struct DirLight {
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec4 FragPosLightSpace;
uniform PointLight pointLight[NUM_POINT_LIGHTS]; 
uniform DirLight dirLight;

uniform sampler2D shadowMap;

#ifdef SHADOWED

float ShadowCalculation(vec4 fragPosLightSpace, vec3 lightDir, vec3 normal)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float currentDepth = projCoords.z;
    float bias = max(0.005 * (1.0 - dot(normal, lightDir)), 0.001);  
	
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x)
	{
	    for(int y = -1; y <= 1; ++y)
	    {
	        float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
	        shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
	    }    
	}
	shadow /= 9.0;

	if(projCoords.z > 1.0)
        shadow = 0.0;


    return shadow;
}  
#endif


vec3 CalcDirLight(DirLight light, vec3 norm, vec3 pos, mat4 view, Material mat) {

	vec3 ambientC = mat.ambient;
	vec3 diffuseC = mat.diffuse;
	vec3 specularC = mat.specular;
	float shininess = mat.shininess;

	vec3 lightDir = normalize( (mat3(view) * -light.direction) ); 

	vec3 ambient = ambientC * light.ambient;
	
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = (diffuseC * diff) * light.diffuse;

#ifdef BLINN_PHONG
	vec3 viewDir = normalize(vec3(0.0) - pos);
	vec3 reflectDir = reflect(-lightDir, norm);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess * 128.0);

#else
	vec3 viewDir = normalize(vec3(0.0) - pos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess * 128.0);
	
#endif

	vec3 specular = specularC * spec * light.specular;

#ifdef SHADOWED
	float shadow = ShadowCalculation(FragPosLightSpace, lightDir, norm); 
	vec3 result;

		result = ambient + ((1.0 - shadow)*(diffuse + specular));
	
	

	
#else 
	vec3 result = ambient + diffuse + specular;
#endif 


	return result;
}

vec3 CalcPointLight(PointLight light, vec3 norm, vec3 pos, mat4 view, Material mat) {
	vec3 ambientC = mat.ambient;
	vec3 diffuseC = mat.diffuse;
	vec3 specularC = mat.specular;
	float shininess = mat.shininess;

	vec3 lPos = (view * vec4(light.position, 1.0)).xyz;
	float distance = length(lPos - pos);
	vec3 lightDir = normalize(lPos - pos);

	float attenuation = 1.0 / (light.constant + light.linear * distance +
						light.quadratic * (distance * distance));
	ambientC *= attenuation;
	diffuseC *= attenuation;
	specularC *= attenuation;

	vec3 ambient = ambientC * light.ambient;
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = (diffuseC * diff) * light.diffuse;

#ifdef BLINN_PHONG
	vec3 viewDir = normalize(vec3(0.0) - pos);
	vec3 reflectDir = reflect(-lightDir, norm);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess * 128.0);

#else
	vec3 viewDir = normalize(vec3(0.0) - pos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess * 128.0);

#endif

	vec3 specular = specularC * spec * light.specular;


	vec3 result = ambient + diffuse + specular;
	return result;
}
